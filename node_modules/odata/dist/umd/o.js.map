{"version":3,"file":"o.js","sources":["../../src/ORequest.ts","../../src/OBatch.ts","../../src/OHandler.ts","../../src/o.ts"],"sourcesContent":["import { OdataQuery } from \"./OdataQuery\";\n\nexport class ORequest {\n  public url: URL;\n\n  constructor(url: URL | string, public config: RequestInit) {\n    if (typeof url === \"string\") {\n      this.url = new URL(url);\n    } else {\n      this.url = url as URL;\n    }\n  }\n\n  public get fetch() {\n    const req = new Request(this.url.href, this.config);\n    return fetch(req, this.config);\n  }\n\n  public applyQuery(query?: OdataQuery) {\n    for (const key in query) {\n      if (query.hasOwnProperty(key)) {\n        this.url.searchParams.append(key, query[key]);\n      }\n    }\n  }\n}\n","import { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\nexport class OBatch {\n  private batchBody: string;\n  private batchUid;\n  private batchConfig: OdataConfig;\n\n  constructor(\n    resources: ORequest[],\n    config: OdataConfig,\n    query?: OdataQuery,\n    private changeset: boolean = false,\n  ) {\n    this.batchConfig = { ...config, ...config.batch };\n    this.batchUid = this.getUid();\n    (this.batchConfig.headers as Headers).set(\n      \"Content-Type\",\n      `multipart/mixed; boundary=${this.batchUid}`,\n    );\n\n    if (this.batchConfig.batch.useChangset) {\n      resources = this.checkForChangset(resources, query);\n    } else {\n      this.batchBody += `--${this.batchUid}`;\n    }\n\n    resources.forEach(\n      (req) => req.config.method === \"GET\" && req.applyQuery(query),\n    );\n    let contentId = 0;\n    this.batchBody += resources.map((req) => {\n      contentId++;\n      return `\nContent-Type: application/http\nContent-Transfer-Encoding: binary\nContent-ID: ${contentId}\n\n${req.config.method} ${req.url.href} HTTP/1.1\n${this.getHeaders(req)}\n${this.getBody(req)}`;\n    }).join(`\n--${this.batchUid}`);\n\n    this.batchBody += `\n--${this.batchUid}--\n `;\n  }\n\n  public async fetch(url: URL) {\n    const req = new ORequest(url, {\n      ...this.batchConfig,\n      body: this.batchBody,\n      method: \"POST\",\n    });\n    const res: Response = await req.fetch;\n    if (res.status === 200) {\n      const data = await res.text();\n      return this.parseResponse(data, res.headers.get(\"Content-Type\"));\n    } else {\n      // check if return is JSON\n      try {\n        const error = await res.json();\n        throw { res, error };\n      } catch (ex) {\n        throw res;\n      }\n    }\n  }\n\n  public parseResponse(responseData: string, contentTypeHeader: string): any {\n    const headers = contentTypeHeader.split(\"boundary=\");\n    const boundary = headers[headers.length - 1];\n    const splitData = responseData.split(`--${boundary}`);\n    splitData.shift();\n    splitData.pop();\n    const parsedData = splitData.map((data) => {\n      const dataSegments = data.trim().split(\"\\r\\n\\r\\n\");\n      if (dataSegments.length === 0 || dataSegments.length > 3) {\n        // we are unable to parse -> return all\n        return data;\n      } else if (dataSegments.length === 3) {\n        // if length >= 3 we have a body, try to parse if JSON and return that!\n        try {\n          const parsed = JSON.parse(dataSegments[2]);\n          const hasFragment = parsed[this.batchConfig.fragment];\n          return hasFragment || parsed;\n        } catch (ex) {\n          return dataSegments[2];\n        }\n      } else {\n        // it seems like we have no body, return the status code\n        return +dataSegments[1].split(\" \")[1];\n      }\n    });\n    return parsedData;\n  }\n\n  /**\n   * If we determine a changset (POST, PUT, PATCH) we initalize a new\n   * OBatch instance for it.\n   */\n  private checkForChangset(resources: ORequest[], query: OdataQuery) {\n    const changeRes = this.getChangeResources(resources);\n\n    if (this.changeset) {\n      this.batchBody += `\nContent-Type: multipart/mixed; boundary=${this.batchUid}\n\n--${this.batchUid}`;\n    } else if (changeRes.length > 0) {\n      this.batchBody = `--${this.batchUid}`;\n      this.batchBody += new OBatch(\n        changeRes,\n        this.batchConfig,\n        query,\n        true,\n      ).batchBody;\n      resources = this.getGETResources(resources);\n    } else {\n      this.batchBody = `--${this.batchUid}`;\n    }\n    return resources;\n  }\n\n  private getGETResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method === \"GET\");\n  }\n\n  private getChangeResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method !== \"GET\");\n  }\n\n  private getBody(req: ORequest) {\n    if (req.config.body) {\n      return `\n      ${req.config.body}\n\n      `;\n    }\n    return \"\";\n  }\n\n  private getUid() {\n    let d = new Date().getTime();\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : (r & 0x7) | 0x8).toString(16);\n    });\n    return `${\n      this.changeset\n        ? this.batchConfig.batch.changsetBoundaryPrefix\n        : this.batchConfig.batch.boundaryPrefix\n    }${uuid}`;\n  }\n\n  private getHeaders(req: ORequest) {\n    return Object.keys(req.config.headers)\n      .map((name) => `${name}:${req.config.headers[name]}`)\n      .join(\"\\n\");\n  }\n}\n","import { OBatch } from \"./OBatch\";\nimport { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\ntype BodyType = Blob | BufferSource | FormData | URLSearchParams | string | object;\n\nexport class OHandler {\n  private requests: ORequest[] = [];\n\n  constructor(public config: OdataConfig) {}\n\n  /**\n   * Does a fetch request to the given endpoint and request\n   * all resources in sequent. Tries to parse the result logical\n   * so that no further processing is used. If the result is only one\n   * entity a object is returned, otherwise a array of objects.\n   *\n   * @example\n   * ```typescript\n   *  const russell = await o('https://services.odata.org/TripPinRESTierService/')\n   *  .get('People('russellwhyte')\n   *  .query();\n   *\n   *  console.log(russell); // shows: { FirstName: \"Russell\", LastName: \"Whyte\" [...] }\n   * ```\n   *\n   * If the request fails with an error code higher then 400 it throws the\n   * Response:\n   *\n   * @example\n   * ```typescript\n   *  try {\n   *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')\n   *      .get('People('unknown')\n   *      .query();\n   *  } catch(res) { // Response\n   *    console.log(res.status); // 404\n   *  }\n   * ```\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   * @returns Either an array or a object with the given entities. If multiple\n   *          resources are fetched, this method returns a array of array/object. If there\n   *          is no content (e.g. for delete) this method returns the Response\n   */\n  public async query(query?: OdataQuery) {\n    try {\n      const response: Response[] = await this.getFetch(query);\n      const json = await Promise.all(\n        response.map(\n          async (res) => {\n            if (res.status >= 400) {\n              throw res;\n            } else if (res.ok && res.json) {\n              try {\n                const data = await res.json();\n                return data[this.config.fragment] || data;\n              } catch (ex) {\n                return res;\n              }\n            } else {\n              return await res.text();\n            }\n          },\n        ),\n      );\n      return json.length > 1 ? json : json[0];\n    } catch (ex) {\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Request all requests in sequent. Does simply return a Response or Response[]\n   * without any data parsing applied.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async fetch(query?: OdataQuery) {\n    try {\n      const fetch = await this.getFetch(query);\n      return fetch.length === 1 ? fetch[0] : fetch;\n    } catch (ex) {\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Does a batch http-batch request. All request in that sequent are send via one\n   * physically request and afterwards parsed to separate data chunks.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async batch(query?: OdataQuery) {\n    try {\n      const batch = new OBatch(this.requests, this.config, query);\n      const url = this.getUrl(this.config.batch.endpoint);\n      const data = await batch.fetch(url);\n      return data;\n    } catch (ex) {\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Gets the data from the endpoint + resource url.\n   *\n   * @param resource The resource to request e.g. People/$value.\n   */\n  public get(resource: string = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"GET\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Post data to an endpoint + resource.\n   *\n   * @param resource The resource to post to.\n   * @param body The data to post.\n   */\n  public post(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"POST\", body: this.getBody(body) });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Put data to an endpoint + resource.\n   *\n   * @param resource The resource to put to.\n   * @param body The data to put.\n   */\n  public put(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"PUT\", body: this.getBody(body) });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Patch data to an endpoint + resource.\n   *\n   * @param resource The resource to patch to.\n   * @param body The data to patch.\n   */\n  public patch(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, {\n      ...this.config,\n      body: this.getBody(body),\n      method: \"PATCH\",\n    });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Deletes a resource from the endpoint.\n   *\n   * @param resource The resource to delete e.g. People/1\n   */\n  public delete(resource = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"DELETE\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Use that method to add any kind of request (e.g. a head request) to\n   * the execution list.\n   *\n   * @example\n   * ```typescript\n   *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});\n   *   const res = await o('http://another.url').request(req).fetch();\n   *   console.log(res.status); // e.g. 200 from http://full.url/healt\n   * ```\n   * @param req The request to add.\n   */\n  public request(req: ORequest) {\n    this.requests.push(req);\n  }\n\n  /**\n   * Determines how many request are outstanding.\n   */\n  public get pending() {\n    return this.requests.length;\n  }\n\n  /**\n   * Returns a URL based on the rootURL + the given resource\n   * @param resource The resource to join.\n   */\n  public getUrl(resource: string) {\n    return new URL(resource, this.config.rootUrl);\n  }\n\n  private async getFetch(query: OdataQuery) {\n    if (this.pending > 1) {\n      const result: Response[] = [];\n      for (const req of this.requests) {\n        req.applyQuery(query);\n        const request = await req.fetch;\n        result.push(request);\n      }\n      return result;\n    } else {\n      this.requests[0].applyQuery(query);\n      return [await this.requests[0].fetch];\n    }\n  }\n\n  private getBody(body: BodyType): any {\n    if (typeof body === \"object\") {\n      return JSON.stringify(body);\n    }\n    return body;\n  }\n}\n","import { OdataConfig } from \"./OdataConfig\";\nimport { OHandler } from \"./OHandler\";\n\n/**\n * Use the 'o'-function to initialize a request directly or use the returned\n * handler to store the settings.\n *\n * Use o() directly jquery like:\n * @example\n * ```typescript\n *  await o('https://rootUrl').get('resource').query();\n * ```\n *\n * Or with a handler:\n * @example\n * ```typescript\n *  const oHandler = o('https://rootUrl');\n *  await oHandler.get('resource').query({ $top: 2 });\n * ```\n *\n * @param rootUrl The url to query\n * @param config The odata and fetch configuration.\n */\nexport function o(rootUrl: string | URL, config?: OdataConfig | any) {\n\n  // polyfill fetch if we have no fetch\n  const env = typeof window !== \"undefined\" ? window : global;\n  if (!(\"fetch\" in env) && !config.disablePolyfill) {\n    require(\"cross-fetch/polyfill\");\n  }\n  if (!(\"URL\" in env) && !config.disablePolyfill) {\n    require(\"universal-url\").shim();\n  }\n\n  // set the default configuration values\n  const defaultConfigValues = {\n    batch: {\n      changsetBoundaryPrefix: \"changset_\",\n      endpoint: \"$batch\",\n      headers: new Headers({\n        \"Content-Type\": \"multipart/mixed\",\n      }),\n      useChangset: false,\n    },\n    boundaryPrefix: \"batch_\",\n    credentials: \"omit\",\n    fragment: \"value\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n    mode: \"cors\",\n    redirect: \"follow\",\n    referrer: \"client\",\n  };\n\n  const mergedConfig = { ...defaultConfigValues, ...config };\n  if (typeof rootUrl === \"string\") {\n    try {\n      // we assuming a resource\n      const configUrl = mergedConfig.rootUrl || window.location.href;\n      rootUrl = new URL(\n        rootUrl,\n        configUrl.endsWith(\"/\") ? configUrl : `${configUrl}/`,\n      );\n    } catch (ex) {\n      // no window?!\n      rootUrl = new URL(rootUrl, mergedConfig.rootUrl);\n    }\n  }\n  mergedConfig.rootUrl = rootUrl;\n  return new OHandler(mergedConfig);\n}\n\n/**\n * Default exports\n */\nexport * from \"./OBatch\";\nexport * from \"./OdataBatchConfig\";\nexport * from \"./OdataConfig\";\nexport * from \"./OdataQuery\";\nexport * from \"./OHandler\";\nexport * from \"./ORequest\";\n"],"names":[],"mappings":"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"}